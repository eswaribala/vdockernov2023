schema{
query: Query
mutation:Mutation

}

scalar Long
scalar Date
interface Customer{
customerId: Long!
name: FullName
contactNo: Long
email: String
password: String
}

type FullName{
firstName: String
middleName: String
lastName: String

}

type Individual implements Customer{
customerId: Long!
name: FullName
contactNo: Long
email: String
password: String
dob: Date
gender: Gender

}

enum Gender{
MALE,FEMALE,TRANSGENDER

}

type Query{

findAllIndividuals:[Individual]
findIndividualById(customerId: Long): Individual
findIndividualByFirstName(firstName: String): [Individual]
findIndividualByContactNo(contactNo: Long): [Individual]


}


input IndividualInput{

customerId: Long!
name: FullNameInput
contactNo: Long
email: String
password: String
dob: Date
gender: Gender

}

input FullNameInput{
firstName: String
middleName: String
lastName: String

}

type Mutation{

addIndividual(individualInput: IndividualInput):Individual
updateIndividual(customerId: Long, email: String): Individual
deleteIndividual(customerId: Long): Boolean

}

