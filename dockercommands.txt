# pull the image
  docker pull mongo

#to create mongo container
  docker run --name=citi-mongo-c1 -p 27017:27017 -d mongo
#to list all the continers with status
 docker container ls -a

# to create mongo client 
   docker exec -it citi-mongo-c1 /bin/bash
# to run mongo client or shell from bash prompt
 mongosh
#create the db
use customerdb;
#insert the document
 db.customers.insert({"id":24543,"name":"parameswari"});
#show dbs;
#to check the container logs
docker logs <containerid> or <containername>
#push the image from local repository to jfrog repository
Step1
docker tag mongo:latest vtraining2023.jfrog.io/docker/mongo:v1
Step2 
docker push vtraining2023.jfrog.io/docker/mongo:v1

#docker hub repository
#push the image
Step 1
docker tag <imagename> <dockerhubusername>/<reponame>:imagetagname
Step2
docker push <dockerhubusername>/<reponame>:imagetagname

# pulling mysql images
docker pull mysql
docker run --name v-mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=testdb -e MYSQL_USER=demo_user -e MYSQL_PASSWORD=demo_pass -d mysql
mysql client
docker exec -it v-mysql mysql -u root -p

#build customer application image
go to project root folder
docker build -f dockerfile -t customerapp .
#create customer app container and link this to mysql container
docker run -p 7072:7072 --name customerapp-c1 --link v-mysql:mysql -d customerapp:latest
#to check api in browser
http://localhost:7072/swagger-ui.html

#how to run compose file
docker-compose up
#run compose file in detached mode
docker-compose up -d

#docker compose scale to scale the conainers
docker-compose up --scale customer-app=3

#to check docker compose mysql secret
docker exec -it <mysql containerid> /bin/bash
#after reaching bash shell, go to /run/secrets
cd /run/secrets
ls
# you can see passwords

#docker volumes
#create docker volume along with container
docker container run -it -v/ubuntuvol --tty ubuntu /bin/bash
#create files in volume
cd ubuntuvol
touch file1.txt file2.txt
#stop the container
exit
#to restart the container
docker container restart <containerid>
#to go to bash shell
docker attach <containerid>
#check the volume
cd ubuntuvol
ls
exit
docker container rm <containerid>

#copy the file from local machine to docker container

docker container run -it -v/ubuntuvol --tty ubuntu /bin/bash

#go to another cli
#copy file from localmachine to container
docker cp intructions.txt <containerid>:/ubuntuvol

#copy files from localdisk to docker volume recursively
docker container run -it -v "c:/Local disk/Docker/dockercompose/secrets":/mnt/vtest ubuntu /bin/bash

#data sharing between containers
data volume container for data sharing
docker run -it -v /data --name container1 busybox

cd data
touch file1.txt
touch file2.txt
let it be running
open another terminal
docker exec container1 ls /data

launch another container
docker run -it --volumes-from container1 --name container2 busybox


#docker multiple volumes
# two different volume id generated
docker run -it -v /var/volume1 -v /var/volume2 busybox

#create volume
docker volume create customervol
docker volume ls

#associate the user defined volume to mysql container
docker run --name v-mysql -v/customervol  -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=testdb -e MYSQL_USER=demo_user -e MYSQL_PASSWORD=demo_pass -d mysql

#network commands
docker network
docker network ls
docker network inspect host

docker run my_container --net=my_network


docker network inspect bridge

create our own network

docker network create --driver bridge my_isolated_bridge_network
docker network create --driver bridge virtusa_network
docker network inspect my_isolated_bridge_network
docker network ls
docker run --net=my_isolated_bridge_network --name=my_psql_db postgres
docker run  it - network=my_isolated_bridge_network ubuntu:latest /bin/bash 
docker network inspect my_isolated_bridge_network










  
